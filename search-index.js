var searchIndex = {};
searchIndex["helix"] = {"doc":"","items":[[3,"BitsVec","helix","A vector to hold values that have a known bit range.",null,null],[8,"ReprUsize","","A trait for representing types as `usize` (useful for enums).",null,null],[10,"from_usize","","Convert the value back from `usize`",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"into_usize","","Convert the value into an `usize`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[3,"FMIndex","","",null,null],[3,"Trie","","",null,null],[12,"is_traced_path","","",1,null],[5,"bwt","","",null,null],[5,"ibwt","","",null,null],[5,"suffix_array","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fmindex"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"new","","",2,null],[11,"new_from_bwt","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"fmindex"}}],[11,"count","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"search","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"trie"}}],[11,"insert","","",1,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"get","","",1,{"inputs":[{"name":"self"},{"name":"i"},{"name":"bool"}],"output":{"name":"option"}}],[11,"new","","Create a new vector that can hold values no larger than the specified `bits`",3,{"inputs":[{"name":"usize"}],"output":{"name":"bitsvec"}}],[11,"with_capacity","","Creates a new vector that can hold the specified bits (atmost) and has capacity for \"N\" additional elements.",3,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"bitsvec"}}],[11,"push","","Push a value into the vector.",3,null],[11,"get","","Get the value from an index in the vector. Note that this is similar to indexed getting, and so it panics when the index is out of bounds. For the non-panicking version, use `checked_get`",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"checked_get","","Returns `Some(T)` if the element exists at the given index or `None` if it doesn't.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Set a value at the given index. Note that this is similar to indexed setting, and so it panics when the index is out of bounds.",3,null],[11,"from_iter","","Creates a vector consuming an iterator of elements.",3,{"inputs":[{"name":"usize"},{"name":"i"}],"output":{"name":"bitsvec"}}],[11,"len","","Returns the length of the vector. This only indicates the number of units it contains, and not the length of the inner vector.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no values (or `false` otherwise).",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reserve","","Reserve space for \"N\" additional elements.",3,null],[11,"shrink_to_fit","","Shrink the inner vector's capacity to fit to its length. It does nothing more than calling the same method in the inner vector.",3,null],[11,"truncate","","Truncate the vector to the given length, removing the out-of-bound elements. Note that this method panics when the length is greater than current length.",3,null],[11,"clear","","Clears the inner vector. Note that this is similar to calling `truncate` with zero.",3,null],[11,"inner_len","","Returns the length of the inner vector. Useful for measuring the memory consumption of the elements.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Creates an iterator over the elements. Note that unlike other iterators, this gives the elements themselves, and not their references.",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"into_iter","","Creates an iterator consuming the vector.",3,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"with_elements","","Creates a vector initialized with \"N\" copies of the given element.",3,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":{"name":"bitsvec"}}],[11,"extend_with_element","","Extends the vector to the specified length, filling additional values with the given element. Note that this method panics when the specified length is shorter than the initial length.",3,null],[11,"contains","","Checks whether the vector contains the given element in O(n) time.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"decode","","",3,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bitsvec"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bitsvec"}],"output":{"name":"bool"}}]],"paths":[[8,"ReprUsize"],[3,"Trie"],[3,"FMIndex"],[3,"BitsVec"]]};
initSearch(searchIndex);
